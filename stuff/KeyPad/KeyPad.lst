gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 1-13-2011  00:12:27
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;*******************************************************************
                                           ; Keypad/LCD Test Code
                                           ; Assembler : mpasm.exe
                                           ; Linker    : mplink.exe
                                           ; Written By : Kevin Lam
                                           ;
                                           ; Notes: You may notice that this code uses unusual directives such
                                           ;        as 'code', 'udata_shr', 'global', 'extern', etc.
                                           ;        This is an example of a project implementing the concept of
                                           ;        'relocatable code'. The individual assembly files are
                                           ;        compiled into .o files, similar to what happens in C,
                                           ;        and then linked together at the end. In order to build
                                           ;        this kind of project, go to Project->Build Options->Project,
                                           ;        then under the MPASM tab, check "Use Alternate Settings"
                                           ;        and type /o in the corresponding textbox. You'll also need
                                           ;        to add an appropriate linker script to the project, which
                                           ;        can be found in MPLAB's program folder. The advantage of
                                           ;        using relocatable code, is that sets of functions can be
                                           ;        compiled as separate units into object files (or libraries)
                                           ;        and then imported into any other project, without worrying
                                           ;        about conflicting variables/code locations etc. This makes
                                           ;        modular programming easier in many cases.
                                           ;*******************************************************************
                                           
                                                 list p=16f877                 ; list directive to define processor
                                                 #include <p16f877.inc>        ; processor specific variable definitions
                                                   LIST
                                           ; P16F877.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                                                   NOLIST
                                                 __CONFIG _CP_OFF & _WDT_OFF & _BODEN_ON & _PWRTE_ON & _HS_OSC & _WRT_ENABLE_ON & _CPD_OFF & _LVP_ON
                                           
                                                 #include <lcd.inc>			   ;Import LCD control functions from lcd.asm
                                           	extern	InitLCD,WR_INS,WR_DATA,ClrLCD
                                           
                                                    ORG       0x0000     ;RESET vector must always be at 0x00
000000   2801     goto	0x1                          goto      init       ;Just jump to the main code section.
                                                    
                                                    code     ;'code' lets the linker decide where in
                                                             ;program memory to put these instructions.
                                           init
000001   018b     clrf	0xb                          clrf      INTCON         ; No interrupts
000002   1683     bsf	0x3, 0x5                      bsf       STATUS,RP0     ; select bank 1
000003   0185     clrf	0x5                          clrf      TRISA          ; All port A is output
000004   30f2     movlw	0xf2                        movlw     b'11110010'    ; Set required keypad inputs
000005   0086     movwf	0x6                         movwf     TRISB
000006   0187     clrf	0x7                          clrf      TRISC          ; All port C is output
000007   0188     clrf	0x8                          clrf      TRISD          ; All port D is output
                                           
000008   1283     bcf	0x3, 0x5                      bcf       STATUS,RP0     ; select bank 0
000009   0185     clrf	0x5                          clrf      PORTA
00000a   0186     clrf	0x6                          clrf      PORTB
00000b   0187     clrf	0x7                          clrf      PORTC
00000c   0188     clrf	0x8                          clrf      PORTD
                                                     
00000d   2027     call	0x27                         call      InitLCD    ;Initialize the LCD (code in lcd.asm; imported by lcd.inc)
                                           
00000e   1c86     btfss	0x6, 0x1           test     btfss		PORTB,1     ;Wait until data is available from the keypad
00000f   280e     goto	0xe                          goto		$-1 
                                           
000010   0e06     swapf	0x6, w                      swapf		PORTB,W     ;Read PortB<7:4> into W<3:0>
000011   390f     andlw	0xf                         andlw		0x0F
000012   0782     addwf	0x2, f                      addwf     PCL,f
000013   3431     retlw	0x31                         dt        "123A456B789C*0#D"
000014   3432     retlw	0x32               
000015   3433     retlw	0x33               
000016   3441     retlw	0x41               
000017   3434     retlw	0x34               
000018   3435     retlw	0x35               
000019   3436     retlw	0x36               
00001a   3442     retlw	0x42               
00001b   3437     retlw	0x37               
00001c   3438     retlw	0x38               
00001d   3439     retlw	0x39               
00001e   3443     retlw	0x43               
00001f   342a     retlw	0x2a               
000020   3430     retlw	0x30               
000021   3423     retlw	0x23               
000022   3444     retlw	0x44               
000023   204b     call	0x4b                         call     WR_DATA      ;Write the value in W to LCD
                                           
000024   1886     btfsc	0x6, 0x1                    btfsc		PORTB,1     ;Wait until key is released
000025   2824     goto	0x24                         goto		$-1
000026   280e     goto	0xe                          goto     test
                                           
                                           
                                                     END
